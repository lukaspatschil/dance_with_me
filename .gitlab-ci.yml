.package-cache: &package-cache
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/
    - frontend/node_modules/
    - backend/node_modules/

.cached-install: &cached-install
   if [ ! -d ./node_modules ];
   then npm ci;
   fi

.inso-runner-setup: &inso-runner-setup
  tags:
    - k8s
  cache: *package-cache
  before_script:
    - *cached-install

default:
  image: node:16
  tags:
    - dancewithme-runner
  cache:
    <<: *package-cache
    policy: pull
  retry:
    max: 2
    when:
      - runner_system_failure
      - scheduler_failure
      - runner_unsupported
      - archived_failure
      - unmet_prerequisites

stages:
  - install
  - lint
  - test
  - build
  - analyze

install:
  stage: install
  script:
    - if [ ! -d ./node_modules ];
      then npm ci;
      fi
  cache: *package-cache

lint-frontend:
  stage: lint
  needs: ["install"]
  script:
    - npm run lint -w frontend

lint-backend:
  stage: lint
  needs: ["install"]
  script:
    - npm run lint -w backend

test-frontend:
  needs: ["lint-frontend"]
  stage: test
  script:
    - npm run test:cov -w frontend
  coverage: '/Branches\s+:\s(\d+.?\d+)%/'
  artifacts:
    when: always
    reports:
      junit:
        - frontend/reports/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml

test-backend:
  needs: ["lint-backend"]
  stage: test
  script:
    - npm run test:cov -w backend
  coverage: '/Branches\s+:\s(\d+.?\d+)%/'
  artifacts:
    when: always
    reports:
      junit:
        - backend/reports/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage/cobertura-coverage.xml

e2e test-backend:
  <<: *inso-runner-setup
  needs: ["lint-backend"]
  stage: test
  script:
    - npm run test:e2e -w backend
  artifacts:
    when: always
    reports:
      junit:
        - backend/reports/junit-e2e.xml

  services:
    - name: registry.reset.inso-w.at/pub/docker/minio-release-2022-05-19t18-20-59z
      command: [ 'server', '/minio' ]
      alias: minio
      variables:
        MINIO_PORT: 9000
        MINIO_DOMAIN: localhost
        MINIO_ACCESSKEY: minioadmin
        MINIO_SECRETKEY: minioadmin
        MINIO_REGION: eu-west-1
    - name: neo4j:4.4.6
      alias: neo4j
      variables:
        NEO4J_ENDPOINT: 'neo4j://localhost:7687'
        NEO4J_AUTH: 'neo4j/dancewithme'

mutation-backend:
  <<: *inso-runner-setup
  needs: ["test-backend"]
  stage: test
  script:
    - npm run test:mutation -w backend
  allow_failure: true
  only:
    - master
    - develop


# integration-test:
#   image: cypress/base:16.13.0
#   needs: ["lint-backend", "lint-frontend"]
#   stage: test
#   script:
#     - npm run cy:run

build-frontend:
  needs: ["test-frontend", "lint-frontend"]
  stage: build
  script:
    - npm run build -w frontend

build-backend:
  needs: ["test-backend", "lint-backend"]
  stage: build
  script:
    - npm run build -w backend

sonar-scanner:
  <<: *inso-runner-setup
  stage: analyze
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    SONAR_TOKEN: "${SONAR_TOKEN}"
    SONAR_HOST_URL: "${SONAR_HOSTURL}"
    GIT_DEPTH: 0
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - npm run test:cov -w frontend
    - npm run test:cov -w backend
    - sonar-scanner
  allow_failure: true
  only:
    - master
